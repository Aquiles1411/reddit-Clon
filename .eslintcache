[{"C:\\Users\\Diego Lobato\\Desktop\\Trabajo\\Prueba tecnica\\Reddit\\React\\readFront-main\\readit\\src\\index.js":"1","C:\\Users\\Diego Lobato\\Desktop\\Trabajo\\Prueba tecnica\\Reddit\\React\\readFront-main\\readit\\src\\App.js":"2","C:\\Users\\Diego Lobato\\Desktop\\Trabajo\\Prueba tecnica\\Reddit\\React\\readFront-main\\readit\\src\\reducers\\reducer.js":"3","C:\\Users\\Diego Lobato\\Desktop\\Trabajo\\Prueba tecnica\\Reddit\\React\\readFront-main\\readit\\src\\components\\Post.js":"4","C:\\Users\\Diego Lobato\\Desktop\\Trabajo\\Prueba tecnica\\Reddit\\React\\readFront-main\\readit\\src\\components\\MainPage.js":"5","C:\\Users\\Diego Lobato\\Desktop\\Trabajo\\Prueba tecnica\\Reddit\\React\\readFront-main\\readit\\src\\components\\Header.js":"6","C:\\Users\\Diego Lobato\\Desktop\\Trabajo\\Prueba tecnica\\Reddit\\React\\readFront-main\\readit\\src\\components\\PostForm.js":"7","C:\\Users\\Diego Lobato\\Desktop\\Trabajo\\Prueba tecnica\\Reddit\\React\\readFront-main\\readit\\src\\components\\SubPage.js":"8","C:\\Users\\Diego Lobato\\Desktop\\Trabajo\\Prueba tecnica\\Reddit\\React\\readFront-main\\readit\\src\\components\\Login.js":"9","C:\\Users\\Diego Lobato\\Desktop\\Trabajo\\Prueba tecnica\\Reddit\\React\\readFront-main\\readit\\src\\components\\SubForm.js":"10","C:\\Users\\Diego Lobato\\Desktop\\Trabajo\\Prueba tecnica\\Reddit\\React\\readFront-main\\readit\\src\\components\\Sidebar.js":"11","C:\\Users\\Diego Lobato\\Desktop\\Trabajo\\Prueba tecnica\\Reddit\\React\\readFront-main\\readit\\src\\components\\Comments.js":"12","C:\\Users\\Diego Lobato\\Desktop\\Trabajo\\Prueba tecnica\\Reddit\\React\\readFront-main\\readit\\src\\components\\Search.js":"13","C:\\Users\\Diego Lobato\\Desktop\\Trabajo\\Prueba tecnica\\Reddit\\React\\readFront-main\\readit\\src\\utils\\axiosWithAuth.js":"14","C:\\Users\\Diego Lobato\\Desktop\\Trabajo\\Prueba tecnica\\Reddit\\React\\readFront-main\\readit\\src\\utils\\checkLoggedIn.js":"15","C:\\Users\\Diego Lobato\\Desktop\\Trabajo\\Prueba tecnica\\Reddit\\React\\readFront-main\\readit\\src\\utils\\axios.js":"16","C:\\Users\\Diego Lobato\\Desktop\\Trabajo\\Prueba tecnica\\Reddit\\React\\readFront-main\\readit\\src\\action\\index.js":"17"},{"size":646,"mtime":1613945448000,"results":"18","hashOfConfig":"19"},{"size":1192,"mtime":1613945448000,"results":"20","hashOfConfig":"19"},{"size":3766,"mtime":1613945448000,"results":"21","hashOfConfig":"19"},{"size":4643,"mtime":1645649442585,"results":"22","hashOfConfig":"19"},{"size":3901,"mtime":1645650328319,"results":"23","hashOfConfig":"19"},{"size":1914,"mtime":1645650404977,"results":"24","hashOfConfig":"19"},{"size":3324,"mtime":1645634964524,"results":"25","hashOfConfig":"19"},{"size":4584,"mtime":1645633666214,"results":"26","hashOfConfig":"19"},{"size":3548,"mtime":1645635664329,"results":"27","hashOfConfig":"19"},{"size":2109,"mtime":1645635098346,"results":"28","hashOfConfig":"19"},{"size":1537,"mtime":1645635021830,"results":"29","hashOfConfig":"19"},{"size":4647,"mtime":1645635527089,"results":"30","hashOfConfig":"19"},{"size":1652,"mtime":1645634987336,"results":"31","hashOfConfig":"19"},{"size":268,"mtime":1645647490091,"results":"32","hashOfConfig":"19"},{"size":103,"mtime":1613945448000,"results":"33","hashOfConfig":"19"},{"size":140,"mtime":1645647485792,"results":"34","hashOfConfig":"19"},{"size":1873,"mtime":1613945448000,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1iz9les",{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"C:\\Users\\Diego Lobato\\Desktop\\Trabajo\\Prueba tecnica\\Reddit\\React\\readFront-main\\readit\\src\\index.js",[],["82","83"],"C:\\Users\\Diego Lobato\\Desktop\\Trabajo\\Prueba tecnica\\Reddit\\React\\readFront-main\\readit\\src\\App.js",["84"],"import React from 'react';\nimport './components/PostForm'\nimport './App.css';\nimport PostForm from './components/PostForm';\nimport Posts from './components/MainPage'\nimport Post from './components/Post'\nimport Header from './components/Header'\nimport Login from './components/Login'\nimport SubPage from './components/SubPage'\nimport SubForm from './components/SubForm'\nimport { Route } from 'react-router-dom'\nimport MainPage from './components/MainPage';\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n\n      {/* allows component to re-render even if already inside component by passing in random key */}\n      {/* <Route\n        exact path=\"/\"\n        render={(props) => <MainPage key={props.location.key} />}\n      /> */}\n      <Route exact path=\"/\">\n        <MainPage />\n      </Route>\n\n      <Route exact path='/login'>\n        <Login />\n      </Route>\n      <Route exact path='/post/:id'>\n        <Post />\n      </Route>\n      <Route exact path='/postform'>\n        <PostForm />\n      </Route>\n      <Route exact path='/r/:id'>\n        <SubPage />\n      </Route>\n\n      <Route exact path='/subform'>\n        <SubForm />\n      </Route>\n    </div>\n  );\n}\n//\n\nexport default App;\n","C:\\Users\\Diego Lobato\\Desktop\\Trabajo\\Prueba tecnica\\Reddit\\React\\readFront-main\\readit\\src\\reducers\\reducer.js",["85","86"],"export const initialState = {\n    posts: [],\n    filteredPosts: [],\n    post: {},\n    subreadits: [],\n    comments: [],\n    loggedIn: false,\n    loggedUser: '',\n    userId: null,\n\n}\n\nexport const reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case \"GET_POSTS\":\n            return {\n                ...state,\n                posts: action.payload\n            }\n        case \"GET_SUBS\":\n            return {\n                ...state,\n                subreadits: action.payload\n            }\n        case \"LOG_USER_IN\":\n\n            return {\n                ...state,\n                loggedIn: true,\n                loggedUser: action.payload.username,\n                userId: action.payload.id\n            }\n        case \"LOG_USER_OUT\":\n            return {\n                ...state,\n                loggedIn: false,\n                loggedUser: '',\n                userId: null\n            }\n        case \"SET_SINGLE_POST\":\n            return {\n                ...state,\n                post: action.payload\n            }\n        case \"UP_VOTE_POST\":\n            return {\n                ...state,\n                posts: state.posts.map(post => {\n                    if (action.payload === post.id)\n                        return { ...post, likes: ++post.likes }\n                    else return { ...post }\n                })\n            }\n        case \"DOWN_VOTE_POST\":\n            return {\n                ...state,\n                posts: state.posts.map(post => {\n                    if (action.payload === post.id)\n                        return { ...post, likes: --post.likes }\n                    else return { ...post }\n                })\n            }\n        case \"UP_VOTE_SINGLE_POST\":\n            return {\n                ...state, post: { ...state.post, likes: ++state.post.likes }\n            }\n        case \"DOWN_VOTE_SINGLE_POST\":\n            return {\n                ...state, post: { ...state.post, likes: --state.post.likes }\n            }\n        case \"SET_COMMENTS\":\n            return {\n                ...state, comments: action.payload\n            }\n        case \"UPVOTE_COMMENT\":\n            return {\n                ...state, comments: state.comments.map(comment => {\n                    if (action.payload === comment.id)\n                        return { ...comment, likes: ++comment.likes }\n                    else return { ...comment }\n                })\n            }\n        case \"DOWNVOTE_COMMENT\":\n            return {\n                ...state, comments: state.comments.map(comment => {\n                    if (action.payload === comment.id)\n                        return { ...comment, likes: --comment.likes }\n                    else return { ...comment }\n                })\n            }\n        case \"DELETE_COMMENT\":\n            return {\n                ...state, comments: state.comments.filter(comment => {\n                    return (comment.id !== action.payload)\n                })\n\n            }\n        case \"TOGGLE_LOGIN\":\n            return {\n                ...state, loggedIn: true\n            }\n        case \"SEARCH_POSTS\":\n            return {\n                ...state, posts: state.posts.filter(post => {\n                    if (post.title.toLowerCase().indexOf(action.payload.toLowerCase()) !== -1)\n                        return post\n                })\n            }\n        case \"DELETE_POST\":\n            return {\n                ...state, posts: state.posts.filter(post => {\n                    if (post.id !== action.payload)\n                        return post\n                })\n            }\n        case \"ADD_POST\":\n            return {\n                ...state,\n                posts: [...state.posts, action.payload]\n            }\n\n        default: return state\n    }\n}","C:\\Users\\Diego Lobato\\Desktop\\Trabajo\\Prueba tecnica\\Reddit\\React\\readFront-main\\readit\\src\\components\\Post.js",["87","88","89","90"],"import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { useHistory, useParams, Link } from 'react-router-dom'\nimport axios from '../utils/axios'\nimport { axiosWithAuth } from '../utils/axiosWithAuth'\nimport SideBar from './Sidebar'\nimport Comments from './Comments'\nimport { checkLoggedIn } from '../utils/checkLoggedIn'\nimport { upVoteSinglePost, downVoteSinglePost, setSinglePost, setComments, deletePost, upVotePost } from '../action/index'\n\n\n\nfunction Post(props) {\n    //post id\n    const { id } = useParams()\n\n    //user_id\n    const tempid = localStorage.getItem('user_id')\n    const history = useHistory()\n    // post based on id\n\n\n    useEffect(() => {\n        async function fetchData() {\n            try {\n                const resPost = await axios.get(`/api/post/${id}`)\n                props.setSinglePost(resPost.data)\n                const resComments = await axios.get(`/api/post/${id}/comments`)\n                props.setComments(resComments.data)\n            }\n            catch (err) {\n                console.log(err)\n            }\n        }\n        fetchData()\n    }, [])\n\n\n\n    const upVoteHandler = (post_id) => {\n        if (checkLoggedIn()) {\n            props.upVoteSinglePost(post_id)\n            props.upVotePost(post_id)\n            axios.put(`/api/post/upvote/${post_id}`)\n                .then(res => console.log(res))\n                .catch(err => console.log(err))\n        }\n        else\n            history.push(`/login`)\n\n    }\n\n    const downVoteHandler = (post_id, post_likes) => {\n        if (checkLoggedIn()) {\n            if (post_likes <= 0)\n                return\n            props.downVoteSinglePost(post_id)\n            axios.put(`/api/post/downvote/${post_id}`)\n                .then(res => console.log(res))\n                .catch(err => console.log(err))\n        }\n        else\n            history.push(`/login`)\n    }\n\n    const deletePostHandler = (post_id) => {\n        axiosWithAuth().delete(`/api/post/${post_id}`)\n            .then(res => {\n                props.deletePost(post_id)\n                history.push('/')\n            })\n            .catch(err => {\n                console.log(err)\n            })\n    }\n\n    return (\n        <div className=\"postPage-container\">\n\n            <div className=\"post-container\">\n                <div className=\"post-details\">\n                    <div className=\"like-container PostPage\">\n                        <div className=\"upvote-container\">\n                            <div className=\"upvote\" onClick={() => { upVoteHandler(props.post.id) }}>\n                                <i class=\"fa fa-angle-up\"></i>\n                            </div>\n                            <div className=\"downvote\" onClick={() => { downVoteHandler(props.post.id, props.post.likes) }}>\n                                <i class=\"fa fa-angle-down\"></i>\n                            </div>\n\n                        </div>\n                        <div style={{ color: \"#0000FF\" }}>{props.post.title} </div>\n                    </div>\n\n                    <div>\n                        <div className=\"post-body\"> {props.post.body} </div>\n                        <div className=\"post-info\">\n                            Posteado Por: {props.post.username} en el subreadit:\n                            <span style={{ color: \"#007BFD\", cursor: \"pointer\" }}>\n                                <Link to={`/r/${props.post.subreadit}`}>\n                                    /r/{props.post.subreadit}\n                                </Link>\n                            </span>\n                        </div>\n                        <div className=\"post-info\">\n                            Likes: {props.post.likes}    Comentarios: {props.comments.length}\n\n                            {localStorage.user_id == props.post.user_id ?\n                                <span onClick={() => deletePostHandler(props.post.id)} style={{ color: \"#007BFD\", cursor: \"pointer\" }}>\n                                    &nbsp;&nbsp;Borrar\n                                              </span> : null\n                            }\n                        </div>\n                    </div>\n                </div>\n                <Comments />\n            </div>\n            <div className=\"side\">\n                <SideBar />\n            </div>\n        </div>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        post: state.post,\n        subreadits: state.subreadits,\n        comments: state.comments\n    }\n}\n\nexport default connect(mapStateToProps, { upVoteSinglePost, downVoteSinglePost, setSinglePost, setComments, deletePost, upVotePost })(Post)\n","C:\\Users\\Diego Lobato\\Desktop\\Trabajo\\Prueba tecnica\\Reddit\\React\\readFront-main\\readit\\src\\components\\MainPage.js",["91","92"],"import React, { useEffect } from 'react'\nimport axios from '../utils/axios'\nimport { axiosWithAuth } from '../utils/axiosWithAuth'\nimport { connect } from 'react-redux'\nimport { getPosts, getSubs, upVotePost, downVotePost, deletePost } from '../action/index'\nimport Sidebar from '../components/Sidebar'\nimport { checkLoggedIn } from '../utils/checkLoggedIn'\nimport { useHistory } from 'react-router-dom'\nimport Search from './Search'\n\nconst styleColor = {\n    color: \"#007BFD\",\n    cursor: \"pointer\"\n}\n\nfunction MainPage(props) {\n    const history = useHistory()\n\n    const postLinkHandler = (post_id) => {\n        history.push(`/post/${post_id}`)\n    }\n\n    const subLinkHandler = (name) => {\n        history.push(`/r/${name}`)\n    }\n\n    const upVoteHandler = (post_id) => {\n        if (checkLoggedIn()) {\n            props.upVotePost(post_id)\n            axios.put(`/api/post/upvote/${post_id}`)\n                .then(res => console.log(res))\n                .catch(err => console.log(err))\n        }\n        else\n            history.push(`/login`)\n\n    }\n\n    const downVoteHandler = (post_id, post_likes) => {\n        if (checkLoggedIn()) {\n            if (post_likes <= 0)\n                return\n            props.downVotePost(post_id)\n            axios.put(`/api/post/downvote/${post_id}`)\n        }\n        else\n            history.push(`/login`)\n    }\n\n    const deletePostHandler = (post_id) => {\n        axiosWithAuth().delete(`/api/post/${post_id}`)\n            .then(res => {\n                props.deletePost(post_id)\n            })\n            .catch(err => {\n                console.log(err)\n            })\n    }\n\n    return (\n        < div className=\"main-container\" >\n            <div className=\"posts-container\">\n                {\n                    props.posts.map(post => {\n                        return <div className=\"post\" >\n                            <div className=\"like-container\">\n\n                                <div className=\"upvote\" onClick={() => { upVoteHandler(post.id) }}>\n                                    <i class=\"fa fa-angle-up\"></i>\n                                </div>\n                                <div className=\"downvote\" onClick={() => { downVoteHandler(post.id, post.likes) }}>\n                                    <i class=\"fa fa-angle-down\"></i>\n                                </div>\n                            </div>\n\n                            <div>\n                                <div onClick={() => postLinkHandler(post.id)} style={{ color: \"#0000FF\", cursor: \"pointer\" }} >{post.title}</div>\n                                <div className=\"post-info\">\n                                    Posteado Por:\n                                <span>{post.username}</span> en el subreadit: <span onClick={() => subLinkHandler(post.subreadit)} style={styleColor}>/r/{post.subreadit}</span>\n                                </div>\n                                <div className=\"post-info\">Likes: {post.likes}\n                                    {localStorage.user_id == post.user_id ?\n                                        <span onClick={() => deletePostHandler(post.id)} style={{ color: \"#007BFD\", cursor: \"pointer\" }}>\n                                            &nbsp;&nbsp;Borrar\n                                              </span> : null\n                                    }\n                                </div>\n                            </div>\n                        </div>\n                    })\n                }\n            </div >\n            <div className=\"side\">\n                <Search />\n                <Sidebar />\n            </div>\n        </div >\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        posts: state.posts,\n        subreadits: state.subreadits,\n        userId: state.userId\n    }\n}\n\nexport default connect(mapStateToProps, { getPosts, getSubs, upVotePost, downVotePost, deletePost })(MainPage)\n","C:\\Users\\Diego Lobato\\Desktop\\Trabajo\\Prueba tecnica\\Reddit\\React\\readFront-main\\readit\\src\\components\\Header.js",["93","94","95"],"import React, { useEffect } from 'react'\nimport { NavLink, useHistory } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { logUserOut, toggleLogin, getPosts, getSubs } from '../action/index'\nimport axios from '../utils/axios'\n\n\nfunction Header(props) {\n    const history = useHistory()\n    //do not log userout out if site reloaded\n    //log users back in with info in local storage\n    useEffect(() => {\n        if (localStorage.user_id)\n            props.toggleLogin()\n    }, [])\n\n    useEffect(() => {\n        async function fetchData() {\n            try {\n                const tempPosts = await axios.get('/api/post')\n                props.getPosts(tempPosts.data)\n                const tempSubs = await axios.get('/r')\n                props.getSubs(tempSubs.data)\n            }\n            catch (err) {\n                console.log(err)\n            }\n        }\n        fetchData()\n    }, [])\n\n\n    const logOutHandler = () => {\n        localStorage.removeItem('token')\n        localStorage.removeItem('user_id')\n        props.logUserOut()\n    }\n\n\n\n    return (\n        <div className=\"header\">\n            <NavLink to='/' className=\"nav\">\n                <img src={'../reddit.png'} className=\"logo\" alt=\"reddit logo\" />\n                <div className=\"title\">Reddit</div>\n\n            </NavLink>\n            <div className=\"loginNav\">\n                {\n                    (props.loggedIn) ?\n                        <div onClick={logOutHandler}>LogOut </div> : null\n                }\n                <NavLink to='/login' className=\"loginNav\">\n                    <div className={props.loggedIn ? \"login\" : \"not-login\"}>Login</div>\n                </NavLink >\n\n            </div>\n        </div >\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        loggedIn: state.loggedIn\n    }\n}\nexport default connect(mapStateToProps, { logUserOut, toggleLogin, getPosts, getSubs })(Header)\n","C:\\Users\\Diego Lobato\\Desktop\\Trabajo\\Prueba tecnica\\Reddit\\React\\readFront-main\\readit\\src\\components\\PostForm.js",["96"],"import React, { useState } from 'react'\nimport { axiosWithAuth } from '../utils/axiosWithAuth'\nimport { connect } from 'react-redux'\nimport { useHistory, Link } from 'react-router-dom'\nimport Sidebar from './Sidebar'\nimport { addPost } from '../action/index'\n\nfunction PostForm(props) {\n    const history = useHistory()\n    const [post, setPost] = useState({ title: '', body: '', subreadit_id: '', user_id: null })\n    const [postValid, setPostValid] = useState(true)\n\n    const changeHandler = (e) => {\n        setPost({ ...post, [e.target.name]: e.target.value })\n    }\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        //search if subreadit exists\n        const tempSub = props.subreadits.filter(s => {\n            if (s.name === post.subreadit_id)\n                return s\n            else\n                return\n        })\n        //check if post is valid\n        if (tempSub.length && post.title && post.body) {\n            const tempId = localStorage.getItem('user_id')\n            const tempPost = { ...post, subreadit_id: tempSub[0].id, user_id: tempId }\n            fetchData(tempPost)\n        }\n        else {\n            setPostValid(false)\n        }\n    }\n\n    const fetchData = (tempPost) => {\n        axiosWithAuth()\n            .post('/api/post', tempPost)\n            .then(res => {\n                props.addPost(res.data)\n\n                history.push('/')\n            })\n            .catch(err => {\n                console.log(err)\n            })\n    }\n\n\n    return (\n        <div className=\"postForm-container\">\n            <form className=\"postForm\" onSubmit={submitHandler}>\n                <div className=\"createPost\">Crear un nuevo post</div>\n                <input\n                    id=\"title\"\n                    name=\"title\"\n                    type=\"text\"\n                    value={post.title}\n                    placeholder=\"Ingrese el titulo\"\n                    onChange={changeHandler}\n                />\n                <textarea\n                    id=\"body\"\n                    name=\"body\"\n                    className=\"postForm-body\"\n                    type=\"textarea\"\n                    value={post.body}\n                    placeholder=\"Ingrese el contenido del post\"\n                    onChange={changeHandler}\n                />\n                <input\n                    id=\"subreadit_id\"\n                    name=\"subreadit_id\"\n                    type=\"text\"\n                    value={post.subreadit_id}\n                    placeholder=\"Ingrese un subreadit\"\n                    onChange={changeHandler}\n                />\n                {postValid === false ? <div className=\"err-msg\">Por favor, ingrese un titulo, contenido y un subreadit valido</div> : null}\n                {props.loggedIn ?\n                    <button className=\"postForm-button\">\n                        submit\n                    </button> : <div className=\"err-msg\">Necesitas estar <Link to='/login'>loggeado</Link> para crear un post</div>\n                }\n            </form>\n            <div className=\"side\">\n\n                <Sidebar />\n            </div>\n        </div>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        subreadits: state.subreadits,\n        loggedIn: state.loggedIn\n    }\n}\nexport default connect(mapStateToProps, { addPost })(PostForm)\n","C:\\Users\\Diego Lobato\\Desktop\\Trabajo\\Prueba tecnica\\Reddit\\React\\readFront-main\\readit\\src\\components\\SubPage.js",[],"C:\\Users\\Diego Lobato\\Desktop\\Trabajo\\Prueba tecnica\\Reddit\\React\\readFront-main\\readit\\src\\components\\Login.js",["97"],"import React, { useState } from 'react'\nimport axios from '../utils/axios'\nimport { useHistory } from 'react-router-dom'\nimport { logUserIn } from '../action/index'\nimport { connect } from 'react-redux'\n\nconst initialUser = {\n    username: \"\",\n    password: \"\"\n}\n\n\nfunction Login(props) {\n    const history = useHistory()\n    const [user, setUser] = useState({})\n\n    //state toggler for user option: register(false) or login(true)\n    const [userOption, setUserOption] = useState(true)\n    const [badCred, setBadCred] = useState(false)\n\n    const changeHandler = (e) => {\n        setUser({ ...user, [e.target.name]: e.target.value })\n    }\n\n    const changeOption = (e) => {\n        setUserOption(!userOption)\n    }\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        if (userOption) {\n            axios.post(\"/api/auth/login\", user)\n                .then((res) => {\n                    localStorage.setItem(\"token\", res.data.token)\n                    localStorage.setItem(\"user_id\", res.data.user.id)\n                    props.logUserIn(res.data.user)\n                    history.push('/')\n                })\n                .catch(err => setBadCred(true))\n        }\n        else {\n            axios.post(\"/api/auth/register\", user)\n                .then((res) => {\n                    axios.post(\"/api/auth/login\", user)\n                        .then((res) => {\n                            localStorage.setItem(\"token\", res.data.token)\n                            localStorage.setItem(\"user_id\", res.data.user.id)\n                            props.logUserIn(res.data.user)\n                            history.push('/')\n                        })\n                        .catch(err => { console.log(err) })\n\n                })\n                .catch(err => console.log(err))\n        }\n    }\n\n    return (\n        <div className=\"loginForm-container\">\n            <form className=\"loginForm\" onSubmit={submitHandler}>\n                <i className=\"fa fa-reddit-square\" aria-hidden=\"true\"></i>\n                <h2 className=\"login-banner\">{userOption ? \"LOGIN\" : \"REGISTRAR\"}</h2>\n\n                <input\n                    name=\"username\"\n                    value={user.username}\n                    onChange={changeHandler}\n                    placeholder=\"Username\"\n                    className=\"loginInput\"\n                />\n\n                <input\n                    name=\"password\"\n                    value={user.password}\n                    onChange={changeHandler}\n                    placeholder=\"Password\"\n                    className=\"loginInput\"\n                    type=\"password\"\n\n                />\n                <div onClick={changeOption}>\n                    {\n                        userOption ? <div className=\"login-question\">¿No eres miembro?.\n                            < span style={{ color: \"#007BFD\" }}>¡Unete!</span>\n                        </div> :\n                            <div className=\"login-question\">¿Ya eres miembro?.\n                                <span style={{ color: \"#007BFD\" }}>Loggeate</span>\n                            </div>\n                    }\n\n                </div>\n                <button className=\"login-button\">Enviar</button>\n                {\n                    badCred ? <div className=\"err-msg\">Usuario o contraseña incorrectos</div> : null\n                }\n            </form>\n        </div >\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        posts: state.posts\n    }\n}\n\nexport default connect(mapStateToProps, { logUserIn })(Login)\n","C:\\Users\\Diego Lobato\\Desktop\\Trabajo\\Prueba tecnica\\Reddit\\React\\readFront-main\\readit\\src\\components\\SubForm.js",["98"],"import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { Link, useHistory } from 'react-router-dom'\nimport { getSubs } from '../action/index'\nimport Sidebar from './Sidebar'\nimport { axiosWithAuth } from '../utils/axiosWithAuth'\n\nfunction SubForm(props) {\n    const history = useHistory()\n    const [subName, setSubName] = useState('')\n\n    const changeHandler = (e) => {\n        setSubName(e.target.value)\n    }\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        if (!subName) {\n            alert(\"El nombre del subreddit no puede estar en blanco\")\n            return\n        }\n\n        if (props.subreadits.find(item => item.name === subName)) {\n            alert(`El subreadit \"${subName}\" subreadit ya existe! `)\n            return\n        }\n\n        axiosWithAuth().post(\"/r/\", { name: subName })\n            .then(res => {\n                props.getSubs(res.data)\n                history.push('/')\n            })\n            .catch(err => {\n                console.log(err)\n            })\n    }\n\n    return (\n        <div className=\"subForm-container\">\n\n            <form className=\"subForm\" onSubmit={submitHandler}>\n                <div className=\"createSub\">Crear un nuevo subreddit</div>\n                <input\n                    type=\"text\"\n                    name=\"name\"\n                    value={subName}\n                    onChange={changeHandler}\n                    placeholder=\"Ingrese un nuevo subreddit\"\n                />\n                {props.loggedIn ?\n                    <button className=\"subForm-button\">\n                        submit\n                    </button> : <div className=\"err-msg\">Es necesario estar <Link to='/login'>loggeado</Link> para agregar un nuevo subreadit</div>\n                }\n            </form>\n            <div className=\"side\">\n                <Sidebar />\n            </div>\n        </div>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        subreadits: state.subreadits,\n        loggedIn: state.loggedIn\n    }\n}\n\nexport default connect(mapStateToProps, { getSubs })(SubForm)\n\n","C:\\Users\\Diego Lobato\\Desktop\\Trabajo\\Prueba tecnica\\Reddit\\React\\readFront-main\\readit\\src\\components\\Sidebar.js",["99"],"import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { useHistory } from 'react-router-dom'\nimport axios from '../utils/axios'\n\n\n\nfunction Sidebar(props) {\n\n    useEffect(() => {\n        async function fetchData() {\n            try {\n                const tempSubs = await axios.get('/r')\n                // props.getSubs(tempSubs.data)\n            }\n            catch (err) {\n                console.log(err)\n            }\n        }\n        fetchData()\n    }, [])\n\n    const history = useHistory()\n\n    const subLinkHandler = (name) => {\n        history.push(`/r/${name}`)\n    }\n\n    const postHandler = (e) => {\n        e.preventDefault()\n        history.push('/postform')\n    }\n\n    const subHandler = (e) => {\n        e.preventDefault()\n        history.push('/subform')\n    }\n\n    return (\n        <div>\n            <button className=\"myButtonP\" onClick={postHandler}>Crear Post</button>\n            <button className=\"myButtonS\" onClick={subHandler}>Crear Subreadit</button>\n            <div style={{ textAlign: \"center\", margin: \"15px 0\" }}>subreadits</div>\n            {\n                props.subreadits.map(s => {\n                    return <div className=\"subs\">\n                        <div onClick={() => subLinkHandler(s.name)} className=\"sub\">r/{s.name}</div>\n\n                    </div>\n                })\n            }\n        </div >\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        subreadits: state.subreadits\n    }\n}\nexport default connect(mapStateToProps, {})(Sidebar)\n","C:\\Users\\Diego Lobato\\Desktop\\Trabajo\\Prueba tecnica\\Reddit\\React\\readFront-main\\readit\\src\\components\\Comments.js",["100"],"import React, { useState } from 'react'\nimport { connect } from 'react-redux'\nimport { setComments, upVoteComment, downVoteComment, deleteComment } from '../action/index'\nimport { axiosWithAuth } from '../utils/axiosWithAuth'\nimport { useParams, Link, useHistory } from 'react-router-dom'\nimport { checkLoggedIn } from '../utils/checkLoggedIn'\n\n\n\nfunction Comments(props) {\n    const { id } = useParams()\n    const tempid = localStorage.getItem('user_id')\n    const history = useHistory()\n\n    const [reply, setReply] = useState({ body: '', user_id: tempid, post_id: Number(id) })\n\n\n    const changeHandler = (e) => {\n        setReply({ ...reply, [e.target.name]: e.target.value })\n    }\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        if (!reply.body) {\n            alert(\"El comentario no puede estar en blanco\")\n            return\n        }\n        axiosWithAuth().post('/api/comment', reply)\n            .then(res => {\n                console.log(\"comentarios\", res.data)\n                props.setComments(res.data)\n\n            })\n            .catch(err => { console.log(err) })\n    }\n\n    const upVoteHandler = (comment_id) => {\n        if (checkLoggedIn()) {\n            props.upVoteComment(comment_id)\n            axiosWithAuth().put(`/api/comment/upvote/${comment_id}`)\n                .then(res => console.log(res))\n                .catch(err => console.log(err))\n\n        }\n        else {\n            history.push('/login')\n        }\n    }\n\n    const downVoteHandler = (comment_id, comment_likes) => {\n        if (checkLoggedIn()) {\n            if (comment_likes <= 0)\n                return\n            props.downVoteComment(comment_id)\n            axiosWithAuth().put(`/api/comment/downvote/${comment_id}`)\n                .then(res => console.log(res))\n                .catch(err => console.log(err))\n        }\n        else {\n            history.push('/login')\n        }\n    }\n\n    const deleteCommentHandler = (comment_id) => {\n        axiosWithAuth().delete(`/api/comment/${comment_id}`)\n            .then(res => {\n                props.deleteComment(comment_id)\n            })\n            .catch(err => {\n                console.log(err)\n            })\n    }\n\n    return (\n        <>\n            <form className=\"reply-container\" onSubmit={submitHandler}>\n                <p>Agregar un comentario</p>\n                <input\n                    id=\"body\"\n                    type=\"textarea\"\n                    name=\"body\"\n                    value={reply.body}\n                    onChange={changeHandler}\n                />\n\n                {props.loggedIn ? <button>submit</button> : <div className='warning'>!Necesitas estar <Link to='/login'>loggeado</Link> para comentar!</div>}\n            </form>\n\n            <div className=\"comments-container\">\n                <div>\n                    {\n                        props.comments.map(comment => {\n                            return <div className=\"comments\">\n                                <div>\n                                    <div className=\"upvote\" onClick={() => { upVoteHandler(comment.id) }}>\n                                        <i class=\"fa fa-angle-up\"></i>\n                                    </div>\n                                    <div className=\"downvote\" onClick={() => { downVoteHandler(comment.id, comment.likes) }}>\n                                        <i class=\"fa fa-angle-down\"></i>\n                                    </div>\n                                </div>\n\n                                <div>\n                                    <div>{comment.body}</div>\n                                    <div className=\"post-info\">Likes: {comment.likes}</div>\n                                    <div className=\"post-info\">Por: {comment.username}\n                                        {comment.user_id == localStorage.user_id ?\n                                            <span onClick={() => deleteCommentHandler(comment.id)} style={{ color: \"#007BFD\", cursor: \"pointer\" }}>\n                                                &nbsp;&nbsp;Borrar\n                                              </span> : null\n                                        }\n\n                                    </div>\n\n                                </div>\n                            </div>\n                        })\n                    }\n                </div>\n\n            </div>\n        </>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        comments: state.comments,\n        loggedIn: state.loggedIn\n\n    }\n}\n\nexport default connect(mapStateToProps, { setComments, upVoteComment, downVoteComment, deleteComment })(Comments)\n","C:\\Users\\Diego Lobato\\Desktop\\Trabajo\\Prueba tecnica\\Reddit\\React\\readFront-main\\readit\\src\\components\\Search.js",[],"C:\\Users\\Diego Lobato\\Desktop\\Trabajo\\Prueba tecnica\\Reddit\\React\\readFront-main\\readit\\src\\utils\\axiosWithAuth.js",[],"C:\\Users\\Diego Lobato\\Desktop\\Trabajo\\Prueba tecnica\\Reddit\\React\\readFront-main\\readit\\src\\utils\\checkLoggedIn.js",[],"C:\\Users\\Diego Lobato\\Desktop\\Trabajo\\Prueba tecnica\\Reddit\\React\\readFront-main\\readit\\src\\utils\\axios.js",[],["101","102"],"C:\\Users\\Diego Lobato\\Desktop\\Trabajo\\Prueba tecnica\\Reddit\\React\\readFront-main\\readit\\src\\action\\index.js",[],{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","severity":1,"message":"108","line":5,"column":8,"nodeType":"109","messageId":"110","endLine":5,"endColumn":13},{"ruleId":"111","severity":1,"message":"112","line":104,"column":58,"nodeType":"113","messageId":"114","endLine":104,"endColumn":60},{"ruleId":"111","severity":1,"message":"112","line":111,"column":58,"nodeType":"113","messageId":"114","endLine":111,"endColumn":60},{"ruleId":"107","severity":1,"message":"115","line":1,"column":17,"nodeType":"109","messageId":"110","endLine":1,"endColumn":25},{"ruleId":"107","severity":1,"message":"116","line":18,"column":11,"nodeType":"109","messageId":"110","endLine":18,"endColumn":17},{"ruleId":"117","severity":1,"message":"118","line":36,"column":8,"nodeType":"119","endLine":36,"endColumn":10,"suggestions":"120"},{"ruleId":"121","severity":1,"message":"122","line":108,"column":51,"nodeType":"123","messageId":"124","endLine":108,"endColumn":53},{"ruleId":"107","severity":1,"message":"125","line":1,"column":17,"nodeType":"109","messageId":"110","endLine":1,"endColumn":26},{"ruleId":"121","severity":1,"message":"122","line":83,"column":59,"nodeType":"123","messageId":"124","endLine":83,"endColumn":61},{"ruleId":"107","severity":1,"message":"126","line":9,"column":11,"nodeType":"109","messageId":"110","endLine":9,"endColumn":18},{"ruleId":"117","severity":1,"message":"127","line":15,"column":8,"nodeType":"119","endLine":15,"endColumn":10,"suggestions":"128"},{"ruleId":"117","severity":1,"message":"127","line":30,"column":8,"nodeType":"119","endLine":30,"endColumn":10,"suggestions":"129"},{"ruleId":"111","severity":1,"message":"130","line":24,"column":17,"nodeType":"131","messageId":"132","endLine":24,"endColumn":23},{"ruleId":"107","severity":1,"message":"133","line":7,"column":7,"nodeType":"109","messageId":"110","endLine":7,"endColumn":18},{"ruleId":"107","severity":1,"message":"125","line":1,"column":27,"nodeType":"109","messageId":"110","endLine":1,"endColumn":36},{"ruleId":"107","severity":1,"message":"134","line":13,"column":23,"nodeType":"109","messageId":"110","endLine":13,"endColumn":31},{"ruleId":"121","severity":1,"message":"122","line":107,"column":58,"nodeType":"123","messageId":"124","endLine":107,"endColumn":60},{"ruleId":"103","replacedBy":"135"},{"ruleId":"105","replacedBy":"136"},"no-native-reassign",["137"],"no-negated-in-lhs",["138"],"no-unused-vars","'Posts' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'useState' is defined but never used.","'tempid' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'id' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["139"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useEffect' is defined but never used.","'history' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["140"],["141"],"Array.prototype.filter() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","'initialUser' is assigned a value but never used.","'tempSubs' is assigned a value but never used.",["137"],["138"],"no-global-assign","no-unsafe-negation",{"desc":"142","fix":"143"},{"desc":"144","fix":"145"},{"desc":"144","fix":"146"},"Update the dependencies array to be: [id, props]",{"range":"147","text":"148"},"Update the dependencies array to be: [props]",{"range":"149","text":"150"},{"range":"151","text":"150"},[1132,1134],"[id, props]",[498,500],"[props]",[914,916]]